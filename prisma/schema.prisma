// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum UserType {
  ADMIN
  COMPANY
  STUDENT
}

enum Status {
  Accepted
  Rejected
  Pending
}

model User {
  id            String         @id @default(cuid())
  name          String?
  username      String         @unique
  password      String
  email         String?        @unique
  emailVerified DateTime       @default(now())
  image         String?
  role          UserType
  accounts      Account[]
  sessions      Session[]
  Notification  Notification[]
  Student       Student[]
  Company       Company[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Company {
  companyId   String       @id @default(cuid())
  companyName String
  address     String       @db.VarChar(255)
  status      Status
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  Job         Job[]
  Internship  Internship[]

  @@index([userId])
}

model Student {
  studentId String     @id @default(cuid())
  fName     String
  lName     String?
  status    Status
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  Feedback  Feedback[]

  @@index([userId])
}

model Job {
  jobId     String   @id @default(cuid())
  title     String
  location  String?
  salary    Int?
  createdAt DateTime @default(now())
  details   String?  @db.VarChar(255)
  company   Company  @relation(fields: [companyId], references: [companyId], onDelete: Cascade)
  companyId String

  @@index([companyId])
}

model Internship {
  internshipId String   @id @default(cuid())
  title        String
  location     String?
  salary       Int?
  createdAt    DateTime @default(now())
  details      String?  @db.VarChar(255)
  company      Company  @relation(fields: [companyId], references: [companyId], onDelete: Cascade)
  companyId    String

  @@index([companyId])
}

model Feedback {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  subject   String
  feedback  String?  @db.VarChar(255)
  rating    Int
  student   Student  @relation(fields: [studentId], references: [studentId], onDelete: Cascade)
  studentId String

  @@index([studentId])
}

model Notification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  title     String
  content   String?  @db.VarChar(255)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@index([userId])
}
