generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum UserType {
  ADMIN
  COMPANY
  STUDENT
}

enum Status {
  Accepted
  Rejected
  Pending
}

enum JobType {
  Job
  Internship
}

model User {
  id            String         @id @default(cuid())
  name          String?
  username      String         @unique
  password      String
  email         String?        @unique
  phone         String?
  emailVerified DateTime       @default(now())
  image         String?
  verifyDoc     String?
  role          UserType
  status        Status         @default(Pending)
  accounts      Account[]
  sessions      Session[]
  notification  Notification[]
  student       Student?
  company       Company?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Company {
  companyId   String        @id @default(cuid())
  companyName String
  email       String
  address     String?       @db.Text
  phone       String?
  status      Status
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String        @unique
  Job         Job[]
  JobFeedback JobFeedback[]

  @@index([userId])
}

model Student {
  studentId         String              @id @default(cuid())
  fName             String
  lName             String?
  email             String
  regId             String              @unique
  address           String?             @db.Text
  district          String?
  state             String?
  pin               Int?
  phone             String?
  status            Status
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String              @unique
  Feedback          Feedback[]
  JobApplication    JobApplication[]
  InternApplication InternApplication[]
  JobFeedback       JobFeedback[]

  @@index([userId])
}

model Job {
  jobId             String              @id @default(cuid())
  title             String
  location          String?
  salary            Int?
  type              JobType             @default(Job)
  startDate         DateTime?           @db.Date
  endDate           DateTime?           @db.Date
  driveDate         DateTime?           @db.Date
  createdAt         DateTime            @default(now())
  details           String?             @db.Text
  orderId           String?
  company           Company             @relation(fields: [companyId], references: [companyId], onDelete: Cascade)
  companyId         String
  JobApplication    JobApplication[]
  InternApplication InternApplication[]

  @@index([companyId])
  @@fulltext([title, details])
}

model JobApplication {
  jobAppId  String   @id @default(cuid())
  appliedAt DateTime @default(now())
  job       Job      @relation(fields: [jobId], references: [jobId], onDelete: Cascade)
  jobId     String
  resume    String
  status    Status   @default(Pending)
  createdAt DateTime @default(now())
  student   Student? @relation(fields: [studentId], references: [studentId])
  studentId String?

  @@index([jobId])
  @@index([studentId])
}

model InternApplication {
  internAppId String   @id @default(cuid())
  appliedAt   DateTime @default(now())
  job         Job      @relation(fields: [jobId], references: [jobId], onDelete: Cascade)
  jobId       String
  resume      String?
  status      Status
  createdAt   DateTime @default(now())
  paymentId   String?
  student     Student? @relation(fields: [studentId], references: [studentId])
  studentId   String?
  Intern      Intern?

  @@index([jobId])
  @@index([studentId])
}

model Intern {
  internId    String            @id @default(cuid())
  paymentId   String?
  internapp   InternApplication @relation(fields: [internappId], references: [internAppId], onDelete: Cascade)
  internappId String            @unique
  payments    Payments[]

  @@index([internappId])
}

model JobFeedback {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  job       String
  feedback  String?  @db.Text
  rating    Int
  student   Student  @relation(fields: [studentId], references: [studentId], onDelete: Cascade)
  studentId String
  company   Company  @relation(fields: [companyId], references: [companyId], onDelete: Cascade)
  companyId String

  @@index([studentId])
  @@index([companyId])
}

model Feedback {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  subject   String
  feedback  String?  @db.Text
  rating    Int
  student   Student  @relation(fields: [studentId], references: [studentId], onDelete: Cascade)
  studentId String

  @@index([studentId])
}

model Notification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  title     String
  content   String?  @db.Text
  link      String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@index([userId])
}

model Payments {
  id            String  @id @default(cuid())
  paymentLinkId String?
  amount        Int?
  intern        Intern  @relation(fields: [internId], references: [internId], onDelete: Cascade)
  internId      String

  @@index([internId])
}
